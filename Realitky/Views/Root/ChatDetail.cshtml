@using Realitky.Models.Entity
@{
    Request_user thread = ViewBag.Thread;
    User user = ViewBag.User;
}

<div class="container">
    @* <div> *@
    @*     <div>User</div> *@
    @*     <div><input type="text" id="userInput" /></div> *@
    @* </div> *@
    <div>
        <div>Message</div>
        <div><input type="text" id="messageInput" /></div>
    </div>
    <div>
        <input class="btn" type="button" id="sendButton" value="Send Message" />
    </div>
    <hr />
    <div>
        <ul id="messagesList">
            @foreach (Message message in thread.Messages.OrderBy(m => m.sent_at).TakeLast(10))
            {
                <li>@message.Sender.username : @message.content</li>
            }
        </ul>
    </div>
</div>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
@* <script src="~/js/chat.js"></script> *@
<script>
    "use strict";
    
    //------------------------------------------
    //------------------ JS --------------------
    //------------------------------------------
    
    let ThreadId = @thread.Id;
    let UserId = @user.Id;
    let Username = "@user.username";
    
    document.getElementById("sendButton").disabled = true;
    
    document.getElementById("sendButton").addEventListener("click", function (event) {
        var input = document.getElementById("messageInput");
        var message = input.value;
        input.value = "";
        if (message != null && message != "")
            SendMessage(message);
        event.preventDefault();
    });
    
    //------------------------------------------
    //--------------- SignalR ------------------
    //------------------------------------------
    
    // Connect
    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
    
    // On connected
    connection.start().then(function () {
        console.log("connected");
        document.getElementById("sendButton").disabled = false;
    }).catch(function (err) {
        return console.error(err.toString());
    });
    
    // From server
    connection.on("ReceiveMessage", function (user, message) {
        console.log("message received");
        var li = document.createElement("li");
        document.getElementById("messagesList").appendChild(li);
        li.textContent = `${user}: ${message}`;
    });
    
    connection.on("ErrorMessage", function (message) {
        console.log("error received");
        var li = document.createElement("li");
        document.getElementById("messagesList").appendChild(li);
        li.textContent = `!!! ${message} !!!`;
    });
    
    // Client to server
    
    function SendMessage(message) {
        connection.invoke("SendMessage", ThreadId, UserId, message)
            .catch(function (err) { return console.error(err.toString()); });
    }
    
</script>

<style>
    input {
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 6px 12px;
    }
</style>